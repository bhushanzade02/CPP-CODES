#include <mpi.h>
#include <iostream>
#include <vector>
using namespace std;

int main(int argc, char* argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int N = 4;  // matrix dimension (4x4)
    vector<int> A;    // only root will hold the full matrix
    vector<int> X(N); // vector X
    vector<int> localRow(N);  // row assigned to each process
    int localResult = 0;      // partial result
    vector<int> result;       // final result (only on root)

    if (rank == 0) {
        // Define matrix A (flattened in row-major order)
        A = {
            1, 2, 3, 4,
            2, 4, 6, 8,
            3, 6, 9, 12,
            4, 8, 12, 16
        };

        // Define vector X
        X = {10, 11, 12, 13};
    }

    // Scatter: each process gets 1 row of A
    MPI_Scatter(A.data(), N, MPI_INT, localRow.data(), N, MPI_INT, 0, MPI_COMM_WORLD);

    // Broadcast vector X to all processes
    MPI_Bcast(X.data(), N, MPI_INT, 0, MPI_COMM_WORLD);

    // Compute dot product of local row and X
    for (int i = 0; i < N; i++) {
        localResult += localRow[i] * X[i];
    }

    if (rank == 0) result.resize(N); // prepare result vector

    // Gather all partial results into root process
    MPI_Gather(&localResult, 1, MPI_INT, result.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        cout << "Result of A * X = [ ";
        for (int i = 0; i < N; i++) {
            cout << result[i] << " ";
        }
        cout << "]" << endl;
    }

    MPI_Finalize();
    return 0;
}
